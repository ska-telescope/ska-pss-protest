#!/usr/bin/env python

"""
    **************************************************************************
    |                                                                        |
    |                   PSS ProTest entrypoint script                        |
    |                                                                        |
    **************************************************************************
    | Description: This file is a command line entrypoint to ProTest -       |
    | the PSS end-to-end product testing framework.                          |
    **************************************************************************
    | Author: Benjamin Shaw                                                  |
    | Email : benjamin.shaw@manchester.ac.uk                                 |
    **************************************************************************
    | usage: protest [-h] -p PATH [-m MARK]                                  |
    |                                                                        |
    | Run PSS Product Tests                                                  |
    |                                                                        |
    | optional arguments:                                                    |
    |  -h, --help            show this help message and exit                 |
    |  -p PATH, --path PATH  Path to cheetah build tree                      |
    |  -m MARK, --mark MARK  Marker of test type to execute (def=product)    |
    |                                                                        |
    **************************************************************************
    | License:                                                               |
    |                                                                        |
    | Copyright 2023 SKA Organisation                                        |
    |                                                                        |
    |Redistribution and use in source and binary forms, with or without      |
    |modification, are permitted provided that the following conditions are  |
    |met:                                                                    |
    |                                                                        |
    |1. Redistributions of source code must retain the above copyright       |
    |notice,                                                                 |
    |this list of conditions and the following disclaimer.                   |
    |                                                                        |
    |2. Redistributions in binary form must reproduce the above copyright    |
    |notice, this list of conditions and the following disclaimer in the     |
    |documentation and/or other materials provided with the distribution.    |
    |                                                                        |
    |3. Neither the name of the copyright holder nor the names of its        |
    |contributors may be used to endorse or promote products derived from    |
    |this                                                                    |
    |software without specific prior written permission.                     |
    **************************************************************************
"""

import argparse
import os
import sys

import pytest

import ska_pss_protest


class ProTest:
    """
    Class to call pytest in order to launch
    PSS product tests
    """

    def __init__(self, path, cache, outdir, mark=None, exclude=None):

        self.path = path
        self.mark = mark
        self.exclude = exclude
        self.cache = cache
        self.outdir = outdir

        # Obtain path of protest
        self.src = os.path.dirname(ska_pss_protest.__file__)

        # Set up markers
        markers = self.set_markers()

        self.run(markers)

    def set_markers(self):
        marker_string = ""
        if self.mark:
            marker_string += self.mark[0]
            for i in range(1, len(self.mark)):
                marker_string += " and " + self.mark[i]
        if self.exclude:
            if self.mark:
                marker_string += " and not " + self.exclude[0]
                for i in range(1, len(self.exclude)):
                    marker_string += " and not " + self.exclude[i]
            else:
                marker_string += "not " + self.exclude[0]
                for i in range(1, len(self.exclude)):
                    marker_string += " and not " + self.exclude[i]
        if not marker_string:
            return "product"
        return marker_string

    def run(self, marker_string):
        """
        Main method
        """
        # Get path to pytest.ini
        ini_path = os.path.join(self.src, "pytest.ini")

        # Set up path to PSS
        try:
            pss_path = "--path=" + self.path
            pytest_args = ["-m", f'"{marker_string}"', "-c", ini_path, pss_path, self.src]
        except TypeError:
            pytest_args = ["-m", f'"{marker_string}"', "-c", ini_path, self.src]
        if self.cache:
            cache_arg = ["--cache=" + self.cache]
            pytest_args = cache_arg + pytest_args
        if self.outdir:
            outdir_arg = ["--outdir=" + self.outdir]
            pytest_args = outdir_arg + pytest_args

        print("Running pytest", " ".join(pytest_args)) ; raise sdfsdfjk
        sys.exit(pytest.main(pytest_args))


def main():
    """
    Entrypoint method
    """
    parser = argparse.ArgumentParser(description="Run PSS Product Tests")
    parser.add_argument(
        "-p",
        "--path",
        help="Path to cheetah build tree",
        required=False,
        default=None,
    )
    parser.add_argument(
        "--cache",
        help="Directory containing locally stored test vectors",
        required=False,
        default=None,
    )
    parser.add_argument(
        "--outdir",
        help="Directory to store candidate data products",
        required=False,
        default="/tmp",
    )
    parser.add_argument(
        "-m",
        "--mark",
        nargs="+",
        help="Marker of test type to execute (def=product)",
        required=False,
    )

    parser.add_argument("-e", "--exclude",  nargs="+", help="Marker of test type to ignore", required=False)
    args = parser.parse_args()

    protest = ProTest(args.path, args.cache, args.outdir, args.mark, args.exclude)
    protest.run()


if __name__ == "__main__":
    main()
